package graphs;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean20 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean28 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean6 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass7 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean44 = hamiltonianCycle42.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle45.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle42.findHamiltonianCycle(intArray75);
        int[] intArray79 = hamiltonianCycle39.findHamiltonianCycle(intArray75);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPathFound(1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (byte) 0);
        boolean boolean33 = hamiltonianCycle17.isPathFound(1);
        boolean boolean35 = hamiltonianCycle17.isPathFound(0);
        boolean boolean37 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle40.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle17.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPathFound(0);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass33 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent(100);
        boolean boolean65 = hamiltonianCycle51.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle51.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean47 = hamiltonianCycle45.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray83 = hamiltonianCycle21.findHamiltonianCycle(intArray78);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent(100);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent(10);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean74 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent(100);
        boolean boolean65 = hamiltonianCycle51.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle51.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent((int) (byte) 10);
        boolean boolean77 = hamiltonianCycle65.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle78 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[][] intArray85 = new int[][] { intArray81, intArray84 };
        int[] intArray86 = hamiltonianCycle78.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle65.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle26.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle25.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean32 = hamiltonianCycle30.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle30.findHamiltonianCycle(intArray66);
        int[] intArray71 = hamiltonianCycle15.findHamiltonianCycle(intArray66);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (short) -1);
        boolean boolean29 = hamiltonianCycle25.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray72);
        int[] intArray75 = hamiltonianCycle39.findHamiltonianCycle(intArray72);
        int[] intArray76 = hamiltonianCycle30.findHamiltonianCycle(intArray72);
        int[] intArray77 = hamiltonianCycle25.findHamiltonianCycle(intArray72);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray72);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(100);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean42 = hamiltonianCycle0.isPathFound(0);
        boolean boolean44 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean78 = hamiltonianCycle0.isPresent(100);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean82 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) '4');
        boolean boolean17 = hamiltonianCycle3.isPresent((int) (byte) 0);
        boolean boolean19 = hamiltonianCycle3.isPathFound(1);
        boolean boolean21 = hamiltonianCycle3.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle22.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent((int) (byte) 10);
        boolean boolean77 = hamiltonianCycle65.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle78 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[][] intArray85 = new int[][] { intArray81, intArray84 };
        int[] intArray86 = hamiltonianCycle78.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle65.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass89 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean70 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) (short) 10);
        int[] intArray57 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray63 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray76 = new int[][] { intArray57, intArray63, intArray69, intArray75 };
        int[] intArray77 = hamiltonianCycle39.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean80 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        boolean boolean15 = hamiltonianCycle5.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        int[] intArray37 = hamiltonianCycle5.findHamiltonianCycle(intArray35);
        boolean boolean39 = hamiltonianCycle5.isPathFound(0);
        boolean boolean41 = hamiltonianCycle5.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle5.isPresent((int) ' ');
        boolean boolean55 = hamiltonianCycle5.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle77 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[][] intArray84 = new int[][] { intArray80, intArray83 };
        int[] intArray85 = hamiltonianCycle77.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle56.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle5.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 10);
        boolean boolean49 = hamiltonianCycle23.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean52 = hamiltonianCycle50.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) (short) 10);
        int[] intArray71 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray77 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray83 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray89 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray90 = new int[][] { intArray71, intArray77, intArray83, intArray89 };
        int[] intArray91 = hamiltonianCycle53.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle50.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle23.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent(100);
        boolean boolean53 = hamiltonianCycle39.isPresent((int) (short) 1);
        boolean boolean55 = hamiltonianCycle39.isPresent((int) (byte) 0);
        boolean boolean57 = hamiltonianCycle39.isPresent((int) (byte) 10);
        boolean boolean59 = hamiltonianCycle39.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        boolean boolean72 = hamiltonianCycle60.isPresent((int) '4');
        boolean boolean74 = hamiltonianCycle60.isPresent((int) (byte) 0);
        boolean boolean76 = hamiltonianCycle60.isPathFound(1);
        boolean boolean78 = hamiltonianCycle60.isPresent((int) '#');
        boolean boolean80 = hamiltonianCycle60.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle60.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle39.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle89 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[] intArray95 = new int[] { (short) -1, (short) 0 };
        int[][] intArray96 = new int[][] { intArray92, intArray95 };
        int[] intArray97 = hamiltonianCycle89.findHamiltonianCycle(intArray96);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray96);
        java.lang.Class<?> wildcardClass99 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean92 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPathFound(1);
        boolean boolean90 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent((int) '4');
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (byte) 0);
        boolean boolean37 = hamiltonianCycle21.isPathFound(1);
        boolean boolean39 = hamiltonianCycle21.isPresent(100);
        boolean boolean41 = hamiltonianCycle21.isPathFound(0);
        boolean boolean43 = hamiltonianCycle21.isPresent((int) ' ');
        boolean boolean45 = hamiltonianCycle21.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle21.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle85 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[] intArray91 = new int[] { (short) -1, (short) 0 };
        int[][] intArray92 = new int[][] { intArray88, intArray91 };
        int[] intArray93 = hamiltonianCycle85.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle64.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle63.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass7 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray72);
        int[] intArray75 = hamiltonianCycle39.findHamiltonianCycle(intArray72);
        int[] intArray76 = hamiltonianCycle28.findHamiltonianCycle(intArray72);
        boolean boolean78 = hamiltonianCycle28.isPresent((int) (short) 10);
        boolean boolean80 = hamiltonianCycle28.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle28.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle15.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle17.isPresent((int) (short) 10);
        boolean boolean43 = hamiltonianCycle17.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean46 = hamiltonianCycle44.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent((int) (short) 10);
        int[] intArray65 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray71 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray77 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray83 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray84 = new int[][] { intArray65, intArray71, intArray77, intArray83 };
        int[] intArray85 = hamiltonianCycle47.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle44.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle17.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent(100);
        boolean boolean44 = hamiltonianCycle30.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle30.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle15.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle39.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPathFound(0);
        boolean boolean29 = hamiltonianCycle15.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle30.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        boolean boolean52 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPathFound(0);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPresent(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        boolean boolean67 = hamiltonianCycle55.isPresent(100);
        boolean boolean69 = hamiltonianCycle55.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle55.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        java.lang.Class<?> wildcardClass81 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle19.isPresent((int) (short) 0);
        boolean boolean37 = hamiltonianCycle19.isPresent((int) (short) 1);
        boolean boolean39 = hamiltonianCycle19.isPresent((-1));
        boolean boolean41 = hamiltonianCycle19.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle42.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        java.lang.Class<?> wildcardClass35 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle40.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean78 = hamiltonianCycle0.isPresent(100);
        boolean boolean80 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle37.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        boolean boolean72 = hamiltonianCycle60.isPresent(100);
        boolean boolean74 = hamiltonianCycle60.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle60.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle37.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        int[][] intArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = hamiltonianCycle0.findHamiltonianCycle(intArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle32.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle17.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) (short) 1);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent((int) (byte) 10);
        boolean boolean44 = hamiltonianCycle32.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        boolean boolean57 = hamiltonianCycle45.isPresent(100);
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle45.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle32.findHamiltonianCycle(intArray90);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray90);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean84 = hamiltonianCycle0.isPresent(0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle35.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle35.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean4 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass5 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean30 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent(100);
        boolean boolean63 = hamiltonianCycle49.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle64.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle49.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(100);
        boolean boolean40 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(100);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean42 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        int[][] intArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = hamiltonianCycle0.findHamiltonianCycle(intArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean96 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(100);
        boolean boolean52 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        boolean boolean55 = hamiltonianCycle43.isPresent((int) '4');
        boolean boolean57 = hamiltonianCycle43.isPresent((int) (byte) 0);
        boolean boolean59 = hamiltonianCycle43.isPathFound(1);
        boolean boolean61 = hamiltonianCycle43.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle83 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[][] intArray90 = new int[][] { intArray86, intArray89 };
        int[] intArray91 = hamiltonianCycle83.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle62.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle43.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean84 = hamiltonianCycle0.isPresent(1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean17 = hamiltonianCycle15.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle18 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean20 = hamiltonianCycle18.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle18.findHamiltonianCycle(intArray51);
        int[] intArray55 = hamiltonianCycle15.findHamiltonianCycle(intArray51);
        int[] intArray56 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle19.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent(10);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean96 = hamiltonianCycle0.isPresent(0);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle37.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle16.findHamiltonianCycle(intArray67);
        int[] intArray71 = hamiltonianCycle15.findHamiltonianCycle(intArray67);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean8 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent((int) (byte) 10);
        boolean boolean21 = hamiltonianCycle9.isPresent((int) '4');
        boolean boolean23 = hamiltonianCycle9.isPresent((int) (byte) 0);
        boolean boolean25 = hamiltonianCycle9.isPathFound(1);
        boolean boolean27 = hamiltonianCycle9.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent(100);
        boolean boolean42 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle28.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle9.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        java.lang.Class<?> wildcardClass67 = intArray66.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((-1));
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        boolean boolean63 = hamiltonianCycle29.isPathFound(0);
        boolean boolean65 = hamiltonianCycle29.isPresent((int) (short) 1);
        boolean boolean67 = hamiltonianCycle29.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle29.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle26.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle25.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        boolean boolean48 = hamiltonianCycle36.isPresent((int) '4');
        boolean boolean50 = hamiltonianCycle36.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean53 = hamiltonianCycle51.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean56 = hamiltonianCycle54.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle54.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle51.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle36.findHamiltonianCycle(intArray87);
        int[] intArray93 = hamiltonianCycle21.findHamiltonianCycle(intArray87);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean98 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        boolean boolean41 = hamiltonianCycle19.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle42.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean84 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean28 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        boolean boolean23 = hamiltonianCycle11.isPresent(100);
        boolean boolean25 = hamiltonianCycle11.isPresent((int) (short) 10);
        boolean boolean27 = hamiltonianCycle11.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle28.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle11.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean63 = hamiltonianCycle61.isPresent((int) (short) -1);
        boolean boolean65 = hamiltonianCycle61.isPresent((int) (short) 0);
        boolean boolean67 = hamiltonianCycle61.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent((int) (byte) 10);
        boolean boolean80 = hamiltonianCycle68.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle68.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean62 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean23 = hamiltonianCycle21.isPresent((int) (short) -1);
        boolean boolean25 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean27 = hamiltonianCycle21.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle28.findHamiltonianCycle(intArray48);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray48);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray48);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        boolean boolean15 = hamiltonianCycle5.isPresent(0);
        boolean boolean17 = hamiltonianCycle5.isPresent((int) '4');
        boolean boolean19 = hamiltonianCycle5.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        boolean boolean32 = hamiltonianCycle20.isPathFound(0);
        boolean boolean34 = hamiltonianCycle20.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray54 = new int[][] { intArray49, intArray53 };
        int[] intArray55 = hamiltonianCycle35.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle35.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle20.findHamiltonianCycle(intArray63);
        int[] intArray67 = hamiltonianCycle5.findHamiltonianCycle(intArray63);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean70 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean64 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPathFound(0);
        boolean boolean29 = hamiltonianCycle15.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle30.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean28 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean34 = hamiltonianCycle32.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle32.findHamiltonianCycle(intArray65);
        int[] intArray69 = hamiltonianCycle23.findHamiltonianCycle(intArray65);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        java.lang.Class<?> wildcardClass71 = intArray65.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPresent(10);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle40.findHamiltonianCycle(intArray70);
        int[] intArray73 = hamiltonianCycle19.findHamiltonianCycle(intArray70);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean32 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent(100);
        boolean boolean44 = hamiltonianCycle30.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        boolean boolean57 = hamiltonianCycle45.isPresent(100);
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle30.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean39 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean41 = hamiltonianCycle21.isPresent((-1));
        boolean boolean43 = hamiltonianCycle21.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent(0);
        boolean boolean56 = hamiltonianCycle44.isPresent(100);
        boolean boolean58 = hamiltonianCycle44.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle44.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle21.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean51 = hamiltonianCycle49.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle49.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean94 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(0);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        boolean boolean90 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle32.findHamiltonianCycle(intArray62);
        boolean boolean66 = hamiltonianCycle32.isPathFound(0);
        boolean boolean68 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle32.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle17.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        boolean boolean37 = hamiltonianCycle25.isPresent(100);
        boolean boolean39 = hamiltonianCycle25.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle40.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle25.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(1);
        boolean boolean66 = hamiltonianCycle0.isPathFound(1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        boolean boolean47 = hamiltonianCycle35.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle35.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        boolean boolean71 = hamiltonianCycle59.isPresent(100);
        boolean boolean73 = hamiltonianCycle59.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle59.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle17.isPresent((int) (short) 10);
        boolean boolean43 = hamiltonianCycle17.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean46 = hamiltonianCycle44.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent((int) (short) 10);
        int[] intArray65 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray71 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray77 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray83 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray84 = new int[][] { intArray65, intArray71, intArray77, intArray83 };
        int[] intArray85 = hamiltonianCycle47.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle44.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle17.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        boolean boolean90 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (short) -1);
        boolean boolean59 = hamiltonianCycle55.isPresent((int) (short) 0);
        boolean boolean61 = hamiltonianCycle55.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent((int) (byte) 10);
        boolean boolean74 = hamiltonianCycle62.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle62.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle55.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent(100);
        boolean boolean63 = hamiltonianCycle49.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle64.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle49.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle16.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray44);
        boolean boolean49 = hamiltonianCycle15.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        boolean boolean84 = hamiltonianCycle50.isPathFound((int) (byte) 0);
        boolean boolean86 = hamiltonianCycle50.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle87 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray90 = new int[] { (short) -1, (short) 0 };
        int[] intArray93 = new int[] { (short) -1, (short) 0 };
        int[][] intArray94 = new int[][] { intArray90, intArray93 };
        int[] intArray95 = hamiltonianCycle87.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle50.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle15.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent(10);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean68 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (short) 0);
        boolean boolean35 = hamiltonianCycle19.isPresent((int) (short) 100);
        boolean boolean37 = hamiltonianCycle19.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        boolean boolean72 = hamiltonianCycle38.isPathFound(0);
        boolean boolean74 = hamiltonianCycle38.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle38.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (short) -1);
        boolean boolean29 = hamiltonianCycle25.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray72);
        int[] intArray75 = hamiltonianCycle39.findHamiltonianCycle(intArray72);
        int[] intArray76 = hamiltonianCycle30.findHamiltonianCycle(intArray72);
        int[] intArray77 = hamiltonianCycle25.findHamiltonianCycle(intArray72);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray72);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent(100);
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPathFound(0);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        java.lang.Class<?> wildcardClass53 = intArray47.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle76 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[] intArray82 = new int[] { (short) -1, (short) 0 };
        int[][] intArray83 = new int[][] { intArray79, intArray82 };
        int[] intArray84 = hamiltonianCycle76.findHamiltonianCycle(intArray83);
        boolean boolean86 = hamiltonianCycle76.isPresent(0);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray94 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray95 = new int[][] { intArray90, intArray94 };
        int[] intArray96 = hamiltonianCycle76.findHamiltonianCycle(intArray95);
        int[] intArray97 = hamiltonianCycle65.findHamiltonianCycle(intArray95);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray95);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent(1);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        int[][] intArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle15.isPresent((int) (byte) 1);
        boolean boolean39 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean42 = hamiltonianCycle40.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        boolean boolean55 = hamiltonianCycle43.isPresent((int) (short) 10);
        int[] intArray61 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray80 = new int[][] { intArray61, intArray67, intArray73, intArray79 };
        int[] intArray81 = hamiltonianCycle43.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle40.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle15.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (short) 100);
        boolean boolean39 = hamiltonianCycle21.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 10);
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray70 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray76 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray77 = new int[][] { intArray58, intArray64, intArray70, intArray76 };
        int[] intArray78 = hamiltonianCycle40.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle21.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle19.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent(10);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 10);
        int[] intArray46 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray52 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray65 = new int[][] { intArray46, intArray52, intArray58, intArray64 };
        int[] intArray66 = hamiltonianCycle28.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle25.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean72 = hamiltonianCycle0.isPresent(10);
        boolean boolean74 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray60 = new int[][] { intArray55, intArray59 };
        int[] intArray61 = hamiltonianCycle41.findHamiltonianCycle(intArray60);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle41.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle28.findHamiltonianCycle(intArray69);
        int[] intArray73 = hamiltonianCycle15.findHamiltonianCycle(intArray69);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        boolean boolean76 = hamiltonianCycle0.isPathFound(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean62 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean6 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean8 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass9 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean51 = hamiltonianCycle49.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle49.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent(0);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPathFound(0);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent(10);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(1);
        boolean boolean66 = hamiltonianCycle0.isPathFound(1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle3.findHamiltonianCycle(intArray47);
        boolean boolean53 = hamiltonianCycle3.isPresent((-1));
        boolean boolean55 = hamiltonianCycle3.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean90 = hamiltonianCycle0.isPathFound(0);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean46 = hamiltonianCycle44.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle44.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle33.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        boolean boolean96 = hamiltonianCycle0.isPresent(10);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        boolean boolean62 = hamiltonianCycle0.isPresent(1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean4 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        boolean boolean53 = hamiltonianCycle5.isPathFound((int) (byte) 0);
        boolean boolean55 = hamiltonianCycle5.isPresent(0);
        boolean boolean57 = hamiltonianCycle5.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle5.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        boolean boolean15 = hamiltonianCycle5.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        int[] intArray37 = hamiltonianCycle5.findHamiltonianCycle(intArray35);
        boolean boolean39 = hamiltonianCycle5.isPathFound(0);
        boolean boolean41 = hamiltonianCycle5.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle5.isPresent((int) ' ');
        boolean boolean55 = hamiltonianCycle5.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle5.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle3.findHamiltonianCycle(intArray47);
        boolean boolean53 = hamiltonianCycle3.isPresent((-1));
        boolean boolean55 = hamiltonianCycle3.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(1);
        boolean boolean66 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 1);
        int[][] intArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = hamiltonianCycle0.findHamiltonianCycle(intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent(100);
        boolean boolean44 = hamiltonianCycle30.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        boolean boolean57 = hamiltonianCycle45.isPresent(100);
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle30.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean17 = hamiltonianCycle15.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle18 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean20 = hamiltonianCycle18.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle18.findHamiltonianCycle(intArray51);
        int[] intArray55 = hamiltonianCycle15.findHamiltonianCycle(intArray51);
        int[] intArray56 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent(100);
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean8 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent(0);
        boolean boolean21 = hamiltonianCycle9.isPresent(100);
        boolean boolean23 = hamiltonianCycle9.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray56);
        boolean boolean60 = hamiltonianCycle26.isPresent((int) (byte) 1);
        boolean boolean62 = hamiltonianCycle26.isPathFound(0);
        boolean boolean64 = hamiltonianCycle26.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent(0);
        boolean boolean77 = hamiltonianCycle65.isPresent(100);
        boolean boolean79 = hamiltonianCycle65.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle65.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle26.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle9.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPathFound(0);
        boolean boolean39 = hamiltonianCycle23.isPresent(0);
        boolean boolean41 = hamiltonianCycle23.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray72);
        int[] intArray75 = hamiltonianCycle23.findHamiltonianCycle(intArray72);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray72);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle77 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[][] intArray84 = new int[][] { intArray80, intArray83 };
        int[] intArray85 = hamiltonianCycle77.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle56.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray39 = new int[][] { intArray34, intArray38 };
        int[] intArray40 = hamiltonianCycle20.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle20.isPathFound((int) (short) 0);
        boolean boolean44 = hamiltonianCycle20.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle46.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle45.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle20.findHamiltonianCycle(intArray74);
        int[] intArray79 = hamiltonianCycle19.findHamiltonianCycle(intArray74);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean19 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray39 = new int[][] { intArray34, intArray38 };
        int[] intArray40 = hamiltonianCycle20.findHamiltonianCycle(intArray39);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle20.findHamiltonianCycle(intArray48);
        boolean boolean52 = hamiltonianCycle20.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle20.isPresent((int) (short) 10);
        boolean boolean56 = hamiltonianCycle20.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        boolean boolean69 = hamiltonianCycle57.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle57.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle20.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle17.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((-1));
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        boolean boolean50 = hamiltonianCycle38.isPresent(100);
        boolean boolean52 = hamiltonianCycle38.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent(100);
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle38.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean40 = hamiltonianCycle0.isPathFound(0);
        boolean boolean42 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent(0);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        boolean boolean74 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        int[] intArray25 = hamiltonianCycle3.findHamiltonianCycle(intArray23);
        int[] intArray26 = hamiltonianCycle0.findHamiltonianCycle(intArray23);
        java.lang.Class<?> wildcardClass27 = intArray23.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent(100);
        boolean boolean42 = hamiltonianCycle28.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle28.findHamiltonianCycle(intArray73);
        int[] intArray77 = hamiltonianCycle15.findHamiltonianCycle(intArray73);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean80 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        boolean boolean62 = hamiltonianCycle52.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent(0);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray82 = new int[][] { intArray77, intArray81 };
        int[] intArray83 = hamiltonianCycle63.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle52.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        boolean boolean88 = hamiltonianCycle0.isPathFound(1);
        boolean boolean90 = hamiltonianCycle0.isPathFound(1);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle37.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        boolean boolean72 = hamiltonianCycle60.isPresent(100);
        boolean boolean74 = hamiltonianCycle60.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle60.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle37.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(1);
        boolean boolean66 = hamiltonianCycle0.isPathFound(1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean32 = hamiltonianCycle30.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle30.findHamiltonianCycle(intArray66);
        int[] intArray71 = hamiltonianCycle15.findHamiltonianCycle(intArray66);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) (short) 10);
        int[] intArray57 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray63 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray76 = new int[][] { intArray57, intArray63, intArray69, intArray75 };
        int[] intArray77 = hamiltonianCycle39.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(100);
        boolean boolean12 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass15 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean56 = hamiltonianCycle54.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle54.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle21.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (byte) 0);
        boolean boolean39 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean41 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean43 = hamiltonianCycle21.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean55 = hamiltonianCycle53.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle44.findHamiltonianCycle(intArray86);
        int[] intArray91 = hamiltonianCycle21.findHamiltonianCycle(intArray86);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        int[][] intArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = hamiltonianCycle0.findHamiltonianCycle(intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean88 = hamiltonianCycle0.isPresent(1);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean68 = hamiltonianCycle0.isPresent(0);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        int[] intArray22 = hamiltonianCycle0.findHamiltonianCycle(intArray20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean39 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean41 = hamiltonianCycle21.isPresent((-1));
        boolean boolean43 = hamiltonianCycle21.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent(0);
        boolean boolean56 = hamiltonianCycle44.isPresent(100);
        boolean boolean58 = hamiltonianCycle44.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle44.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle21.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean82 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) '4');
        boolean boolean17 = hamiltonianCycle3.isPresent((int) (byte) 0);
        boolean boolean19 = hamiltonianCycle3.isPathFound(1);
        boolean boolean21 = hamiltonianCycle3.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle22.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPresent(10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle23.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent(10);
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean51 = hamiltonianCycle49.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle49.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean94 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean30 = hamiltonianCycle0.isPresent(10);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass33 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean6 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean8 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent(0);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray28 = new int[][] { intArray23, intArray27 };
        int[] intArray29 = hamiltonianCycle9.findHamiltonianCycle(intArray28);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        int[] intArray39 = hamiltonianCycle9.findHamiltonianCycle(intArray37);
        boolean boolean41 = hamiltonianCycle9.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean55 = hamiltonianCycle53.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle42.findHamiltonianCycle(intArray86);
        int[] intArray91 = hamiltonianCycle9.findHamiltonianCycle(intArray86);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle23.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle36.isPresent((int) ' ');
        boolean boolean70 = hamiltonianCycle36.isPresent((int) (short) 10);
        boolean boolean72 = hamiltonianCycle36.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent((int) (byte) 10);
        boolean boolean85 = hamiltonianCycle73.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle73.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle36.findHamiltonianCycle(intArray93);
        int[] intArray97 = hamiltonianCycle33.findHamiltonianCycle(intArray93);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent(100);
        boolean boolean44 = hamiltonianCycle30.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        boolean boolean57 = hamiltonianCycle45.isPresent(100);
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle30.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPresent((-1));
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass33 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean6 = hamiltonianCycle0.isPresent(10);
        boolean boolean8 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        boolean boolean41 = hamiltonianCycle19.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle42.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(0);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        int[][] intArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPathFound(0);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean60 = hamiltonianCycle58.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle58.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle55.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass97 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean60 = hamiltonianCycle58.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle58.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle55.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        boolean boolean15 = hamiltonianCycle5.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        int[] intArray37 = hamiltonianCycle5.findHamiltonianCycle(intArray35);
        boolean boolean39 = hamiltonianCycle5.isPresent(0);
        boolean boolean41 = hamiltonianCycle5.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPathFound(0);
        boolean boolean58 = hamiltonianCycle42.isPresent(0);
        boolean boolean60 = hamiltonianCycle42.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle42.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle5.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle51.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass83 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean47 = hamiltonianCycle45.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray83 = hamiltonianCycle21.findHamiltonianCycle(intArray78);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        boolean boolean74 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent(1);
        boolean boolean58 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent(10);
        boolean boolean34 = hamiltonianCycle0.isPresent(1);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent(100);
        boolean boolean65 = hamiltonianCycle51.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle51.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray40 = new int[][] { intArray35, intArray39 };
        int[] intArray41 = hamiltonianCycle21.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle20.findHamiltonianCycle(intArray49);
        int[] intArray53 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (byte) 0);
        boolean boolean39 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean41 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean43 = hamiltonianCycle21.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean55 = hamiltonianCycle53.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle44.findHamiltonianCycle(intArray86);
        int[] intArray91 = hamiltonianCycle21.findHamiltonianCycle(intArray86);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle33.isPathFound((int) (short) 0);
        boolean boolean57 = hamiltonianCycle33.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle59.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle33.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        boolean boolean61 = hamiltonianCycle27.isPathFound(0);
        boolean boolean63 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle27.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        boolean boolean76 = hamiltonianCycle0.isPathFound(1);
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent(0);
        boolean boolean41 = hamiltonianCycle29.isPresent(100);
        boolean boolean43 = hamiltonianCycle29.isPresent((int) (short) 0);
        boolean boolean45 = hamiltonianCycle29.isPresent((int) (short) 100);
        boolean boolean47 = hamiltonianCycle29.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) (short) 10);
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray72 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray78 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray84 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray85 = new int[][] { intArray66, intArray72, intArray78, intArray84 };
        int[] intArray86 = hamiltonianCycle48.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle29.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean76 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean62 = hamiltonianCycle0.isPresent(10);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        boolean boolean49 = hamiltonianCycle37.isPresent((int) '4');
        boolean boolean51 = hamiltonianCycle37.isPresent((int) (byte) 0);
        boolean boolean53 = hamiltonianCycle37.isPathFound(1);
        boolean boolean55 = hamiltonianCycle37.isPresent(100);
        boolean boolean57 = hamiltonianCycle37.isPathFound(0);
        boolean boolean59 = hamiltonianCycle37.isPresent((int) ' ');
        boolean boolean61 = hamiltonianCycle37.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle37.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean28 = hamiltonianCycle26.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle26.findHamiltonianCycle(intArray59);
        int[] intArray63 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        boolean boolean65 = hamiltonianCycle15.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle15.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        int[] intArray57 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray62 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray67 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray72 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[][] intArray73 = new int[][] { intArray57, intArray62, intArray67, intArray72 };
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent((int) (byte) 10);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        boolean boolean62 = hamiltonianCycle52.isPresent((int) (byte) 10);
        boolean boolean64 = hamiltonianCycle52.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent(0);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray84 = new int[][] { intArray79, intArray83 };
        int[] intArray85 = hamiltonianCycle65.findHamiltonianCycle(intArray84);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle65.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle52.findHamiltonianCycle(intArray93);
        int[] intArray97 = hamiltonianCycle39.findHamiltonianCycle(intArray93);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent((int) (short) 10);
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray72 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray78 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray79 = new int[][] { intArray60, intArray66, intArray72, intArray78 };
        int[] intArray80 = hamiltonianCycle42.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle39.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        boolean boolean62 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        int[][] intArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean78 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (byte) 0);
        boolean boolean39 = hamiltonianCycle23.isPathFound(1);
        boolean boolean41 = hamiltonianCycle23.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray61 = new int[][] { intArray56, intArray60 };
        int[] intArray62 = hamiltonianCycle42.findHamiltonianCycle(intArray61);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle42.findHamiltonianCycle(intArray70);
        int[] intArray73 = hamiltonianCycle23.findHamiltonianCycle(intArray70);
        boolean boolean75 = hamiltonianCycle23.isPresent((int) ' ');
        boolean boolean77 = hamiltonianCycle23.isPresent(100);
        boolean boolean79 = hamiltonianCycle23.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle23.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPathFound(0);
        boolean boolean39 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle23.isPresent(100);
        boolean boolean43 = hamiltonianCycle23.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        boolean boolean56 = hamiltonianCycle44.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle78 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[][] intArray85 = new int[][] { intArray81, intArray84 };
        int[] intArray86 = hamiltonianCycle78.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle57.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle44.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle23.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPathFound(1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound(0);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        java.lang.Class<?> wildcardClass61 = intArray60.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        boolean boolean48 = hamiltonianCycle36.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle49.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle36.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle21.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(0);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean56 = hamiltonianCycle54.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle54.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle45.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent(10);
        boolean boolean34 = hamiltonianCycle0.isPresent(1);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean39 = hamiltonianCycle23.isPresent((int) (short) 0);
        boolean boolean41 = hamiltonianCycle23.isPresent((int) (short) 1);
        boolean boolean43 = hamiltonianCycle23.isPresent((-1));
        boolean boolean45 = hamiltonianCycle23.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        boolean boolean58 = hamiltonianCycle46.isPresent(100);
        boolean boolean60 = hamiltonianCycle46.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle46.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle23.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        boolean boolean98 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle38.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle21.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean63 = hamiltonianCycle61.isPresent((int) (short) -1);
        boolean boolean65 = hamiltonianCycle61.isPresent((int) (short) 0);
        boolean boolean67 = hamiltonianCycle61.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent((int) (byte) 10);
        boolean boolean80 = hamiltonianCycle68.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle68.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent(100);
        boolean boolean65 = hamiltonianCycle51.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle51.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(100);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass13 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPathFound(1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        boolean boolean67 = hamiltonianCycle55.isPresent(100);
        boolean boolean69 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean94 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        int[] intArray59 = new int[] { (short) 1, (short) 0, 100, (byte) 0 };
        int[][] intArray60 = new int[][] { intArray59 };
        int[] intArray61 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 0, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean44 = hamiltonianCycle0.isPresent((-1));
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean19 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray39 = new int[][] { intArray34, intArray38 };
        int[] intArray40 = hamiltonianCycle20.findHamiltonianCycle(intArray39);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle20.findHamiltonianCycle(intArray48);
        boolean boolean52 = hamiltonianCycle20.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle20.isPresent((int) (short) 10);
        boolean boolean56 = hamiltonianCycle20.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        boolean boolean69 = hamiltonianCycle57.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle57.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle20.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle17.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle23.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent(100);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle19.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent(10);
        boolean boolean94 = hamiltonianCycle0.isPresent(1);
        boolean boolean96 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPathFound(0);
        boolean boolean39 = hamiltonianCycle19.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle19.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle42.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean36 = hamiltonianCycle34.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle37.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle34.findHamiltonianCycle(intArray67);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray67);
        boolean boolean73 = hamiltonianCycle23.isPresent((-1));
        boolean boolean75 = hamiltonianCycle23.isPresent((int) (short) 0);
        int[] intArray80 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray85 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray90 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray95 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[][] intArray96 = new int[][] { intArray80, intArray85, intArray90, intArray95 };
        int[] intArray97 = hamiltonianCycle23.findHamiltonianCycle(intArray96);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray96);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }
}


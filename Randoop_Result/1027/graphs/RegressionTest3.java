package graphs;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        int[][] intArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = hamiltonianCycle0.findHamiltonianCycle(intArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle26.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle25.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean32 = hamiltonianCycle30.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent(0);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray63 = new int[][] { intArray58, intArray62 };
        int[] intArray64 = hamiltonianCycle44.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle33.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle30.findHamiltonianCycle(intArray63);
        int[] intArray67 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        boolean boolean69 = hamiltonianCycle19.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) (short) 100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        boolean boolean50 = hamiltonianCycle38.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent((int) (byte) 10);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle85 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[] intArray91 = new int[] { (short) -1, (short) 0 };
        int[][] intArray92 = new int[][] { intArray88, intArray91 };
        int[] intArray93 = hamiltonianCycle85.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle64.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle51.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle38.findHamiltonianCycle(intArray92);
        int[] intArray97 = hamiltonianCycle23.findHamiltonianCycle(intArray92);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean46 = hamiltonianCycle0.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        boolean boolean59 = hamiltonianCycle47.isPresent((int) '4');
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (byte) 0);
        boolean boolean63 = hamiltonianCycle47.isPathFound(1);
        boolean boolean65 = hamiltonianCycle47.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle87 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray90 = new int[] { (short) -1, (short) 0 };
        int[] intArray93 = new int[] { (short) -1, (short) 0 };
        int[][] intArray94 = new int[][] { intArray90, intArray93 };
        int[] intArray95 = hamiltonianCycle87.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle66.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle47.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle10 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean12 = hamiltonianCycle10.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle10.findHamiltonianCycle(intArray43);
        int[] intArray47 = hamiltonianCycle1.findHamiltonianCycle(intArray43);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        java.lang.Class<?> wildcardClass49 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 10);
        int[] intArray46 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray52 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray65 = new int[][] { intArray46, intArray52, intArray58, intArray64 };
        int[] intArray66 = hamiltonianCycle28.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle25.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        java.lang.Class<?> wildcardClass69 = intArray65.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle26.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle25.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle37.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle16.findHamiltonianCycle(intArray67);
        int[] intArray71 = hamiltonianCycle15.findHamiltonianCycle(intArray67);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle37.findHamiltonianCycle(intArray67);
        boolean boolean71 = hamiltonianCycle37.isPathFound(0);
        boolean boolean73 = hamiltonianCycle37.isPresent((int) (short) 1);
        boolean boolean75 = hamiltonianCycle37.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle76 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[] intArray82 = new int[] { (short) -1, (short) 0 };
        int[][] intArray83 = new int[][] { intArray79, intArray82 };
        int[] intArray84 = hamiltonianCycle76.findHamiltonianCycle(intArray83);
        boolean boolean86 = hamiltonianCycle76.isPresent(0);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray94 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray95 = new int[][] { intArray90, intArray94 };
        int[] intArray96 = hamiltonianCycle76.findHamiltonianCycle(intArray95);
        int[] intArray97 = hamiltonianCycle37.findHamiltonianCycle(intArray95);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray95);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle26.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle13.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        boolean boolean39 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle53.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle40.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle27.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) (short) 10);
        int[] intArray37 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray43 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray49 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray55 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray56 = new int[][] { intArray37, intArray43, intArray49, intArray55 };
        int[] intArray57 = hamiltonianCycle19.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray56);
        java.lang.Class<?> wildcardClass59 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPathFound(1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle32.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle17.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean29 = hamiltonianCycle27.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent((int) (short) 10);
        int[] intArray48 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray54 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray67 = new int[][] { intArray48, intArray54, intArray60, intArray66 };
        int[] intArray68 = hamiltonianCycle30.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle27.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        boolean boolean72 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean28 = hamiltonianCycle26.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle26.findHamiltonianCycle(intArray59);
        int[] intArray63 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        boolean boolean65 = hamiltonianCycle15.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle15.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle17.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle17.isPresent((int) ' ');
        boolean boolean51 = hamiltonianCycle17.isPresent((int) (short) 10);
        boolean boolean53 = hamiltonianCycle17.isPathFound(0);
        boolean boolean55 = hamiltonianCycle17.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent((int) (short) 10);
        int[] intArray74 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray80 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray86 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray92 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray93 = new int[][] { intArray74, intArray80, intArray86, intArray92 };
        int[] intArray94 = hamiltonianCycle56.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 10);
        boolean boolean49 = hamiltonianCycle23.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean52 = hamiltonianCycle50.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) (short) 10);
        int[] intArray71 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray77 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray83 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray89 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray90 = new int[][] { intArray71, intArray77, intArray83, intArray89 };
        int[] intArray91 = hamiltonianCycle53.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle50.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle23.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean56 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        boolean boolean73 = hamiltonianCycle61.isPresent((int) '4');
        boolean boolean75 = hamiltonianCycle61.isPresent((int) (byte) 0);
        boolean boolean77 = hamiltonianCycle61.isPathFound(1);
        boolean boolean79 = hamiltonianCycle61.isPresent((int) '#');
        boolean boolean81 = hamiltonianCycle61.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean94 = hamiltonianCycle0.isPathFound(0);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent(100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle28.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean66 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPresent((-1));
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPathFound(1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle40.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray60 = new int[][] { intArray55, intArray59 };
        int[] intArray61 = hamiltonianCycle41.findHamiltonianCycle(intArray60);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle41.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle28.findHamiltonianCycle(intArray69);
        int[] intArray73 = hamiltonianCycle15.findHamiltonianCycle(intArray69);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        java.lang.Class<?> wildcardClass75 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle19.isPresent((int) (short) 0);
        boolean boolean37 = hamiltonianCycle19.isPresent((int) (short) 1);
        boolean boolean39 = hamiltonianCycle19.isPresent((-1));
        boolean boolean41 = hamiltonianCycle19.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle42.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean32 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean84 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPresent(0);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass15 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) '4');
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (byte) 0);
        boolean boolean69 = hamiltonianCycle53.isPathFound(1);
        boolean boolean71 = hamiltonianCycle53.isPresent((int) '#');
        boolean boolean73 = hamiltonianCycle53.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle53.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass85 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPresent(10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass35 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean70 = hamiltonianCycle0.isPresent(1);
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        boolean boolean81 = hamiltonianCycle47.isPathFound((int) (byte) 0);
        boolean boolean83 = hamiltonianCycle47.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle84 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[] intArray90 = new int[] { (short) -1, (short) 0 };
        int[][] intArray91 = new int[][] { intArray87, intArray90 };
        int[] intArray92 = hamiltonianCycle84.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle47.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        boolean boolean96 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent((int) (short) 10);
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray72 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray78 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray79 = new int[][] { intArray60, intArray66, intArray72, intArray78 };
        int[] intArray80 = hamiltonianCycle42.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle39.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean44 = hamiltonianCycle42.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle45.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle42.findHamiltonianCycle(intArray75);
        int[] intArray79 = hamiltonianCycle39.findHamiltonianCycle(intArray75);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean55 = hamiltonianCycle53.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean58 = hamiltonianCycle56.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle53.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray40 = new int[][] { intArray35, intArray39 };
        int[] intArray41 = hamiltonianCycle21.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle20.findHamiltonianCycle(intArray49);
        int[] intArray53 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean56 = hamiltonianCycle0.isPresent((-1));
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle47.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray75);
        int[] intArray79 = hamiltonianCycle45.findHamiltonianCycle(intArray75);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle32.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle17.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean70 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent(0);
        boolean boolean39 = hamiltonianCycle27.isPresent((int) '4');
        boolean boolean41 = hamiltonianCycle27.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPathFound(0);
        boolean boolean56 = hamiltonianCycle42.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle78 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[][] intArray85 = new int[][] { intArray81, intArray84 };
        int[] intArray86 = hamiltonianCycle78.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle57.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle42.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle27.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        boolean boolean47 = hamiltonianCycle35.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle35.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean66 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent((int) (byte) 10);
        boolean boolean53 = hamiltonianCycle41.isPresent((int) '4');
        boolean boolean55 = hamiltonianCycle41.isPresent((int) (byte) 0);
        boolean boolean57 = hamiltonianCycle41.isPathFound(1);
        boolean boolean59 = hamiltonianCycle41.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle60.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle41.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean76 = hamiltonianCycle0.isPresent(10);
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle37.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray65);
        int[] intArray69 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (byte) 0);
        boolean boolean33 = hamiltonianCycle17.isPathFound(1);
        boolean boolean35 = hamiltonianCycle17.isPathFound(0);
        boolean boolean37 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle40.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle17.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle7 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray10 = new int[] { (short) -1, (short) 0 };
        int[] intArray13 = new int[] { (short) -1, (short) 0 };
        int[][] intArray14 = new int[][] { intArray10, intArray13 };
        int[] intArray15 = hamiltonianCycle7.findHamiltonianCycle(intArray14);
        boolean boolean17 = hamiltonianCycle7.isPresent((int) (byte) 10);
        boolean boolean19 = hamiltonianCycle7.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        int[] intArray29 = hamiltonianCycle7.findHamiltonianCycle(intArray27);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray27);
        boolean boolean32 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean25 = hamiltonianCycle23.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        boolean boolean38 = hamiltonianCycle26.isPresent((int) (short) 10);
        int[] intArray44 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray50 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray56 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray62 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray63 = new int[][] { intArray44, intArray50, intArray56, intArray62 };
        int[] intArray64 = hamiltonianCycle26.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle23.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        boolean boolean73 = hamiltonianCycle61.isPresent((int) '4');
        boolean boolean75 = hamiltonianCycle61.isPresent((int) (byte) 0);
        boolean boolean77 = hamiltonianCycle61.isPathFound(1);
        boolean boolean79 = hamiltonianCycle61.isPresent((int) '#');
        boolean boolean81 = hamiltonianCycle61.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 10);
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPathFound(0);
        boolean boolean29 = hamiltonianCycle15.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle30.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent((int) (byte) 10);
        boolean boolean21 = hamiltonianCycle9.isPresent((int) '4');
        boolean boolean23 = hamiltonianCycle9.isPresent((int) (byte) 0);
        boolean boolean25 = hamiltonianCycle9.isPathFound(1);
        boolean boolean27 = hamiltonianCycle9.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent(100);
        boolean boolean42 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle28.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle9.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean96 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle3.findHamiltonianCycle(intArray47);
        boolean boolean53 = hamiltonianCycle3.isPresent((-1));
        boolean boolean55 = hamiltonianCycle3.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 0);
        int[][] intArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent((int) (byte) 10);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) '4');
        boolean boolean53 = hamiltonianCycle39.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean56 = hamiltonianCycle54.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean59 = hamiltonianCycle57.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle57.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle54.findHamiltonianCycle(intArray90);
        int[] intArray95 = hamiltonianCycle39.findHamiltonianCycle(intArray90);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle37.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle16.findHamiltonianCycle(intArray67);
        int[] intArray71 = hamiltonianCycle15.findHamiltonianCycle(intArray67);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean17 = hamiltonianCycle15.isPresent((int) (short) -1);
        boolean boolean19 = hamiltonianCycle15.isPresent((int) (short) 0);
        boolean boolean21 = hamiltonianCycle15.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        boolean boolean34 = hamiltonianCycle22.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle22.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle46.isPresent((int) '4');
        boolean boolean60 = hamiltonianCycle46.isPresent((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle46.isPathFound(1);
        boolean boolean64 = hamiltonianCycle46.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent(0);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray84 = new int[][] { intArray79, intArray83 };
        int[] intArray85 = hamiltonianCycle65.findHamiltonianCycle(intArray84);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle65.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle46.findHamiltonianCycle(intArray93);
        int[] intArray97 = hamiltonianCycle15.findHamiltonianCycle(intArray93);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean47 = hamiltonianCycle45.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray83 = hamiltonianCycle21.findHamiltonianCycle(intArray78);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle31 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[][] intArray38 = new int[][] { intArray34, intArray37 };
        int[] intArray39 = hamiltonianCycle31.findHamiltonianCycle(intArray38);
        boolean boolean41 = hamiltonianCycle31.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray61 = new int[][] { intArray56, intArray60 };
        int[] intArray62 = hamiltonianCycle42.findHamiltonianCycle(intArray61);
        int[] intArray63 = hamiltonianCycle31.findHamiltonianCycle(intArray61);
        boolean boolean65 = hamiltonianCycle31.isPathFound(0);
        boolean boolean67 = hamiltonianCycle31.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle31.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        java.lang.Class<?> wildcardClass79 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle28.findHamiltonianCycle(intArray48);
        int[] intArray51 = hamiltonianCycle25.findHamiltonianCycle(intArray48);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray48);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        java.lang.Class<?> wildcardClass51 = intArray47.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray40 = new int[][] { intArray35, intArray39 };
        int[] intArray41 = hamiltonianCycle21.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle20.findHamiltonianCycle(intArray49);
        int[] intArray53 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean56 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle53.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent((int) '4');
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (byte) 0);
        boolean boolean37 = hamiltonianCycle21.isPathFound(1);
        boolean boolean39 = hamiltonianCycle21.isPresent(100);
        boolean boolean41 = hamiltonianCycle21.isPathFound(0);
        boolean boolean43 = hamiltonianCycle21.isPresent((int) ' ');
        boolean boolean45 = hamiltonianCycle21.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle21.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        java.lang.Class<?> wildcardClass69 = intArray65.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent(10);
        boolean boolean34 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean32 = hamiltonianCycle0.isPathFound(1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle76 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[] intArray82 = new int[] { (short) -1, (short) 0 };
        int[][] intArray83 = new int[][] { intArray79, intArray82 };
        int[] intArray84 = hamiltonianCycle76.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle55.findHamiltonianCycle(intArray83);
        int[] intArray86 = hamiltonianCycle54.findHamiltonianCycle(intArray83);
        int[] intArray87 = hamiltonianCycle53.findHamiltonianCycle(intArray83);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        java.lang.Class<?> wildcardClass89 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle26.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle13.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle23.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean33 = hamiltonianCycle17.isPathFound((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent(100);
        boolean boolean63 = hamiltonianCycle49.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle49.findHamiltonianCycle(intArray83);
        int[] intArray86 = hamiltonianCycle34.findHamiltonianCycle(intArray83);
        int[] intArray87 = hamiltonianCycle17.findHamiltonianCycle(intArray83);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        boolean boolean47 = hamiltonianCycle35.isPresent(100);
        boolean boolean49 = hamiltonianCycle35.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle35.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        boolean boolean74 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray56 = hamiltonianCycle0.findHamiltonianCycle(intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        int[][] intArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = hamiltonianCycle0.findHamiltonianCycle(intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle32.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle17.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        boolean boolean37 = hamiltonianCycle25.isPathFound(0);
        boolean boolean39 = hamiltonianCycle25.isPathFound(1);
        boolean boolean41 = hamiltonianCycle25.isPresent((-1));
        boolean boolean43 = hamiltonianCycle25.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        boolean boolean78 = hamiltonianCycle44.isPathFound(0);
        boolean boolean80 = hamiltonianCycle44.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle44.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle25.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPathFound(0);
        boolean boolean96 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle40.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        boolean boolean72 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent(1);
        boolean boolean58 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        boolean boolean73 = hamiltonianCycle61.isPresent((int) '4');
        boolean boolean75 = hamiltonianCycle61.isPresent((int) (byte) 0);
        boolean boolean77 = hamiltonianCycle61.isPathFound(1);
        boolean boolean79 = hamiltonianCycle61.isPresent((int) '#');
        boolean boolean81 = hamiltonianCycle61.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean60 = hamiltonianCycle58.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle58.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle25.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle15.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle37.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle16.findHamiltonianCycle(intArray67);
        int[] intArray71 = hamiltonianCycle15.findHamiltonianCycle(intArray67);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        boolean boolean74 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean78 = hamiltonianCycle0.isPathFound(0);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPresent(10);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean44 = hamiltonianCycle0.isPresent((-1));
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        int[] intArray59 = new int[] { (short) 1, (short) 0, 100, (byte) 0 };
        int[][] intArray60 = new int[][] { intArray59 };
        int[] intArray61 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        java.lang.Class<?> wildcardClass62 = intArray61.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 0, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle32.findHamiltonianCycle(intArray62);
        int[] intArray65 = hamiltonianCycle17.findHamiltonianCycle(intArray62);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray62);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean90 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean45 = hamiltonianCycle43.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle43.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle32.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle32.isPresent((int) (short) 10);
        boolean boolean84 = hamiltonianCycle32.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle85 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[] intArray91 = new int[] { (short) -1, (short) 0 };
        int[][] intArray92 = new int[][] { intArray88, intArray91 };
        int[] intArray93 = hamiltonianCycle85.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle32.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle19.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        boolean boolean63 = hamiltonianCycle29.isPathFound(0);
        boolean boolean65 = hamiltonianCycle29.isPresent((int) (short) 1);
        boolean boolean67 = hamiltonianCycle29.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle29.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        boolean boolean67 = hamiltonianCycle55.isPresent((int) (short) 10);
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray91 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray92 = new int[][] { intArray73, intArray79, intArray85, intArray91 };
        int[] intArray93 = hamiltonianCycle55.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent((int) '4');
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (byte) 0);
        boolean boolean37 = hamiltonianCycle21.isPathFound(1);
        boolean boolean39 = hamiltonianCycle21.isPresent(100);
        boolean boolean41 = hamiltonianCycle21.isPathFound(0);
        boolean boolean43 = hamiltonianCycle21.isPresent((int) ' ');
        boolean boolean45 = hamiltonianCycle21.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle21.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((-1));
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        boolean boolean50 = hamiltonianCycle38.isPresent(100);
        boolean boolean52 = hamiltonianCycle38.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent(100);
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle38.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (byte) 0);
        boolean boolean33 = hamiltonianCycle17.isPathFound(1);
        boolean boolean35 = hamiltonianCycle17.isPathFound(0);
        boolean boolean37 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle40.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle17.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) (short) 10);
        int[] intArray37 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray43 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray49 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray55 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray56 = new int[][] { intArray37, intArray43, intArray49, intArray55 };
        int[] intArray57 = hamiltonianCycle19.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray56);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean82 = hamiltonianCycle0.isPresent(10);
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass5 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        java.lang.Class<?> wildcardClass59 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass15 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        boolean boolean39 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle53.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle40.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle27.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPathFound(0);
        boolean boolean39 = hamiltonianCycle23.isPresent(0);
        boolean boolean41 = hamiltonianCycle23.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray72);
        int[] intArray75 = hamiltonianCycle23.findHamiltonianCycle(intArray72);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray72);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        boolean boolean96 = hamiltonianCycle0.isPresent(10);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((-1));
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        boolean boolean50 = hamiltonianCycle38.isPresent(100);
        boolean boolean52 = hamiltonianCycle38.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent(100);
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle38.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle38.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle19.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent(0);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray41 = new int[][] { intArray36, intArray40 };
        int[] intArray42 = hamiltonianCycle22.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        int[] intArray52 = hamiltonianCycle22.findHamiltonianCycle(intArray50);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray50);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray50);
        java.lang.Class<?> wildcardClass55 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle38.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle37.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean90 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean74 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass35 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean32 = hamiltonianCycle30.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent(0);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray63 = new int[][] { intArray58, intArray62 };
        int[] intArray64 = hamiltonianCycle44.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle33.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle30.findHamiltonianCycle(intArray63);
        int[] intArray67 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        boolean boolean69 = hamiltonianCycle19.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray40 = new int[][] { intArray35, intArray39 };
        int[] intArray41 = hamiltonianCycle21.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle21.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        boolean boolean56 = hamiltonianCycle44.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle78 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[][] intArray85 = new int[][] { intArray81, intArray84 };
        int[] intArray86 = hamiltonianCycle78.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle57.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle44.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle21.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass91 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        boolean boolean70 = hamiltonianCycle0.isPresent(10);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean74 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean66 = hamiltonianCycle0.isPathFound(0);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean82 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 0);
        int[][] intArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle17.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle17.isPresent((int) ' ');
        boolean boolean51 = hamiltonianCycle17.isPresent((int) (short) 10);
        boolean boolean53 = hamiltonianCycle17.isPathFound(0);
        boolean boolean55 = hamiltonianCycle17.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent((int) (short) 10);
        int[] intArray74 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray80 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray86 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray92 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray93 = new int[][] { intArray74, intArray80, intArray86, intArray92 };
        int[] intArray94 = hamiltonianCycle56.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle87 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray90 = new int[] { (short) -1, (short) 0 };
        int[] intArray93 = new int[] { (short) -1, (short) 0 };
        int[][] intArray94 = new int[][] { intArray90, intArray93 };
        int[] intArray95 = hamiltonianCycle87.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle66.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle53.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle26.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle25.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle76 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[] intArray82 = new int[] { (short) -1, (short) 0 };
        int[][] intArray83 = new int[][] { intArray79, intArray82 };
        int[] intArray84 = hamiltonianCycle76.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle55.findHamiltonianCycle(intArray83);
        int[] intArray86 = hamiltonianCycle54.findHamiltonianCycle(intArray83);
        int[] intArray87 = hamiltonianCycle53.findHamiltonianCycle(intArray83);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        java.lang.Class<?> wildcardClass47 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean92 = hamiltonianCycle0.isPathFound(1);
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle32.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle17.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass85 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean82 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent((int) (byte) 10);
        boolean boolean57 = hamiltonianCycle45.isPresent((int) '4');
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (byte) 0);
        boolean boolean61 = hamiltonianCycle45.isPathFound(1);
        boolean boolean63 = hamiltonianCycle45.isPresent((int) '#');
        boolean boolean65 = hamiltonianCycle45.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean68 = hamiltonianCycle66.isPresent((int) (short) -1);
        boolean boolean70 = hamiltonianCycle66.isPresent((int) (short) 0);
        boolean boolean72 = hamiltonianCycle66.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent((int) (byte) 10);
        boolean boolean85 = hamiltonianCycle73.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle73.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle66.findHamiltonianCycle(intArray93);
        int[] intArray97 = hamiltonianCycle45.findHamiltonianCycle(intArray93);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        java.lang.Class<?> wildcardClass99 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        boolean boolean49 = hamiltonianCycle37.isPresent(100);
        boolean boolean51 = hamiltonianCycle37.isPathFound(0);
        boolean boolean53 = hamiltonianCycle37.isPresent(0);
        boolean boolean55 = hamiltonianCycle37.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle37.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        boolean boolean53 = hamiltonianCycle41.isPresent(100);
        boolean boolean55 = hamiltonianCycle41.isPresent((int) (short) 10);
        boolean boolean57 = hamiltonianCycle41.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle41.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        boolean boolean47 = hamiltonianCycle35.isPresent(100);
        boolean boolean49 = hamiltonianCycle35.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle35.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean76 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        boolean boolean37 = hamiltonianCycle25.isPresent(100);
        boolean boolean39 = hamiltonianCycle25.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle40.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle25.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((-1));
        boolean boolean58 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean34 = hamiltonianCycle32.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle32.findHamiltonianCycle(intArray65);
        int[] intArray69 = hamiltonianCycle23.findHamiltonianCycle(intArray65);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        java.lang.Class<?> wildcardClass71 = intArray65.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        java.lang.Class<?> wildcardClass61 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent((int) (byte) 10);
        boolean boolean53 = hamiltonianCycle41.isPresent((int) '4');
        boolean boolean55 = hamiltonianCycle41.isPresent((int) (byte) 0);
        boolean boolean57 = hamiltonianCycle41.isPathFound(1);
        boolean boolean59 = hamiltonianCycle41.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle60.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle41.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        boolean boolean37 = hamiltonianCycle3.isPathFound(0);
        boolean boolean39 = hamiltonianCycle3.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle3.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        boolean boolean53 = hamiltonianCycle5.isPathFound((int) (byte) 0);
        boolean boolean55 = hamiltonianCycle5.isPresent(0);
        boolean boolean57 = hamiltonianCycle5.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle5.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        boolean boolean88 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean78 = hamiltonianCycle0.isPathFound(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean8 = hamiltonianCycle0.isPresent(0);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean40 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPathFound(1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        boolean boolean71 = hamiltonianCycle59.isPresent((int) '4');
        boolean boolean73 = hamiltonianCycle59.isPresent((int) (byte) 0);
        boolean boolean75 = hamiltonianCycle59.isPathFound(1);
        boolean boolean77 = hamiltonianCycle59.isPresent((int) '#');
        boolean boolean79 = hamiltonianCycle59.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle59.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean46 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean28 = hamiltonianCycle26.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle26.findHamiltonianCycle(intArray59);
        int[] intArray63 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent(0);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray84 = new int[][] { intArray79, intArray83 };
        int[] intArray85 = hamiltonianCycle65.findHamiltonianCycle(intArray84);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle65.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle64.findHamiltonianCycle(intArray93);
        int[] intArray97 = hamiltonianCycle15.findHamiltonianCycle(intArray93);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        java.lang.Class<?> wildcardClass99 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((-1));
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent((int) (short) 10);
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray72 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray78 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray79 = new int[][] { intArray60, intArray66, intArray72, intArray78 };
        int[] intArray80 = hamiltonianCycle42.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle39.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass5 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean56 = hamiltonianCycle54.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle54.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle45.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent(0);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray63 = new int[][] { intArray58, intArray62 };
        int[] intArray64 = hamiltonianCycle44.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle33.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        boolean boolean55 = hamiltonianCycle21.isPathFound(0);
        boolean boolean57 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean59 = hamiltonianCycle21.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle21.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass83 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) (short) 10);
        int[] intArray57 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray63 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray76 = new int[][] { intArray57, intArray63, intArray69, intArray75 };
        int[] intArray77 = hamiltonianCycle39.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        boolean boolean81 = hamiltonianCycle47.isPathFound((int) (byte) 0);
        boolean boolean83 = hamiltonianCycle47.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle84 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[] intArray90 = new int[] { (short) -1, (short) 0 };
        int[][] intArray91 = new int[][] { intArray87, intArray90 };
        int[] intArray92 = hamiltonianCycle84.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle47.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        boolean boolean96 = hamiltonianCycle0.isPathFound(1);
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 0);
        int[][] intArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPathFound(0);
        boolean boolean39 = hamiltonianCycle19.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle19.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle42.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle50.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean23 = hamiltonianCycle21.isPresent((int) (short) -1);
        boolean boolean25 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean27 = hamiltonianCycle21.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle28.findHamiltonianCycle(intArray48);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray48);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray48);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean32 = hamiltonianCycle30.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle30.findHamiltonianCycle(intArray66);
        int[] intArray71 = hamiltonianCycle15.findHamiltonianCycle(intArray66);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(10);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray54 = new int[][] { intArray49, intArray53 };
        int[] intArray55 = hamiltonianCycle35.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle35.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (short) -1);
        boolean boolean29 = hamiltonianCycle25.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray72);
        int[] intArray75 = hamiltonianCycle39.findHamiltonianCycle(intArray72);
        int[] intArray76 = hamiltonianCycle30.findHamiltonianCycle(intArray72);
        int[] intArray77 = hamiltonianCycle25.findHamiltonianCycle(intArray72);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray72);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle32.findHamiltonianCycle(intArray62);
        boolean boolean66 = hamiltonianCycle32.isPathFound(0);
        boolean boolean68 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle32.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle17.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean48 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean55 = hamiltonianCycle53.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean58 = hamiltonianCycle56.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle53.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (short) 0);
        int[][] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = hamiltonianCycle0.findHamiltonianCycle(intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray54 = new int[][] { intArray49, intArray53 };
        int[] intArray55 = hamiltonianCycle35.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle35.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPathFound(1);
        boolean boolean66 = hamiltonianCycle0.isPresent(10);
        boolean boolean68 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        int[][] intArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = hamiltonianCycle0.findHamiltonianCycle(intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean36 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent(10);
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray45);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        boolean boolean62 = hamiltonianCycle52.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent(0);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray82 = new int[][] { intArray77, intArray81 };
        int[] intArray83 = hamiltonianCycle63.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle52.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }
}


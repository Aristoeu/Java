package graphs;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass15 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle15.isPathFound((int) (short) 0);
        boolean boolean39 = hamiltonianCycle15.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray60 = new int[][] { intArray55, intArray59 };
        int[] intArray61 = hamiltonianCycle41.findHamiltonianCycle(intArray60);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle62.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle41.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle40.findHamiltonianCycle(intArray92);
        int[] intArray97 = hamiltonianCycle15.findHamiltonianCycle(intArray92);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        boolean boolean41 = hamiltonianCycle19.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle42.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle32.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle17.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent(100);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        int[][] intArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle23.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle35.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle35.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((-1));
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean98 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle26.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle13.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean98 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) '4');
        boolean boolean17 = hamiltonianCycle3.isPresent((int) (byte) 0);
        boolean boolean19 = hamiltonianCycle3.isPathFound(1);
        boolean boolean21 = hamiltonianCycle3.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle22.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean96 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent(100);
        boolean boolean63 = hamiltonianCycle49.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle64.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle49.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle32.findHamiltonianCycle(intArray62);
        int[] intArray65 = hamiltonianCycle17.findHamiltonianCycle(intArray62);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray62);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent(100);
        boolean boolean63 = hamiltonianCycle49.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle64.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle49.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(0);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        boolean boolean49 = hamiltonianCycle37.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle37.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        int[] intArray57 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray62 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray67 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray72 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[][] intArray73 = new int[][] { intArray57, intArray62, intArray67, intArray72 };
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent(100);
        boolean boolean65 = hamiltonianCycle51.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle51.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean39 = hamiltonianCycle23.isPresent((int) (short) 0);
        boolean boolean41 = hamiltonianCycle23.isPresent((int) (short) 1);
        boolean boolean43 = hamiltonianCycle23.isPresent((-1));
        boolean boolean45 = hamiltonianCycle23.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        boolean boolean58 = hamiltonianCycle46.isPresent(100);
        boolean boolean60 = hamiltonianCycle46.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle46.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle23.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass33 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        int[][] intArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = hamiltonianCycle0.findHamiltonianCycle(intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent(100);
        boolean boolean63 = hamiltonianCycle49.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle64.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle49.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean36 = hamiltonianCycle34.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle37.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle34.findHamiltonianCycle(intArray67);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray67);
        boolean boolean73 = hamiltonianCycle23.isPresent((-1));
        boolean boolean75 = hamiltonianCycle23.isPresent((int) (short) 0);
        int[] intArray80 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray85 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray90 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray95 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[][] intArray96 = new int[][] { intArray80, intArray85, intArray90, intArray95 };
        int[] intArray97 = hamiltonianCycle23.findHamiltonianCycle(intArray96);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray96);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) '4');
        boolean boolean17 = hamiltonianCycle3.isPresent((int) (byte) 0);
        boolean boolean19 = hamiltonianCycle3.isPathFound(1);
        boolean boolean21 = hamiltonianCycle3.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle22.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean96 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean58 = hamiltonianCycle56.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle47.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        boolean boolean84 = hamiltonianCycle74.isPresent(0);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray93 = new int[][] { intArray88, intArray92 };
        int[] intArray94 = hamiltonianCycle74.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle63.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        int[] intArray57 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray62 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray67 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray72 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[][] intArray73 = new int[][] { intArray57, intArray62, intArray67, intArray72 };
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        java.lang.Class<?> wildcardClass75 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean23 = hamiltonianCycle21.isPresent((int) (short) -1);
        boolean boolean25 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean27 = hamiltonianCycle21.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle28.findHamiltonianCycle(intArray48);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray48);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray48);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass15 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass15 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean62 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        boolean boolean47 = hamiltonianCycle35.isPresent(100);
        boolean boolean49 = hamiltonianCycle35.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle35.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        java.lang.Class<?> wildcardClass73 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        int[][] intArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = hamiltonianCycle0.findHamiltonianCycle(intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        boolean boolean84 = hamiltonianCycle74.isPresent(0);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray93 = new int[][] { intArray88, intArray92 };
        int[] intArray94 = hamiltonianCycle74.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle63.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        int[][] intArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = hamiltonianCycle0.findHamiltonianCycle(intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass5 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle26.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle13.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        java.lang.Class<?> wildcardClass33 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        java.lang.Class<?> wildcardClass69 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPresent(100);
        boolean boolean39 = hamiltonianCycle19.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray60 = new int[][] { intArray55, intArray59 };
        int[] intArray61 = hamiltonianCycle41.findHamiltonianCycle(intArray60);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle62.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle41.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle40.findHamiltonianCycle(intArray92);
        int[] intArray97 = hamiltonianCycle19.findHamiltonianCycle(intArray92);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean17 = hamiltonianCycle15.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle18 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean20 = hamiltonianCycle18.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle18.findHamiltonianCycle(intArray51);
        int[] intArray55 = hamiltonianCycle15.findHamiltonianCycle(intArray51);
        int[] intArray56 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        java.lang.Class<?> wildcardClass57 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        boolean boolean49 = hamiltonianCycle37.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle37.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) (short) 10);
        int[] intArray57 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray63 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray76 = new int[][] { intArray57, intArray63, intArray69, intArray75 };
        int[] intArray77 = hamiltonianCycle39.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        boolean boolean41 = hamiltonianCycle19.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle42.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        java.lang.Class<?> wildcardClass39 = intArray37.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle3.findHamiltonianCycle(intArray47);
        boolean boolean53 = hamiltonianCycle3.isPresent((-1));
        boolean boolean55 = hamiltonianCycle3.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean60 = hamiltonianCycle58.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle58.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle25.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass97 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        boolean boolean62 = hamiltonianCycle52.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent(0);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray82 = new int[][] { intArray77, intArray81 };
        int[] intArray83 = hamiltonianCycle63.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle52.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle39.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPathFound(0);
        boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        int[][] intArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle32.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle17.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle51.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass35 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle35.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle35.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass83 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 1);
        int[][] intArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        boolean boolean96 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle40.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass59 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        boolean boolean47 = hamiltonianCycle35.isPresent(100);
        boolean boolean49 = hamiltonianCycle35.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle35.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent(100);
        boolean boolean65 = hamiltonianCycle51.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle51.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent((int) (byte) 10);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) '4');
        boolean boolean53 = hamiltonianCycle39.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean56 = hamiltonianCycle54.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean59 = hamiltonianCycle57.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle57.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle54.findHamiltonianCycle(intArray90);
        int[] intArray95 = hamiltonianCycle39.findHamiltonianCycle(intArray90);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        java.lang.Class<?> wildcardClass97 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle32.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle17.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle53.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean5 = hamiltonianCycle3.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle6 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[][] intArray13 = new int[][] { intArray9, intArray12 };
        int[] intArray14 = hamiltonianCycle6.findHamiltonianCycle(intArray13);
        boolean boolean16 = hamiltonianCycle6.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        int[] intArray38 = hamiltonianCycle6.findHamiltonianCycle(intArray36);
        int[] intArray39 = hamiltonianCycle3.findHamiltonianCycle(intArray36);
        int[] intArray40 = hamiltonianCycle0.findHamiltonianCycle(intArray36);
        java.lang.Class<?> wildcardClass41 = intArray36.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle35.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle35.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        java.lang.Class<?> wildcardClass63 = intArray59.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle39.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean17 = hamiltonianCycle15.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle18 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean20 = hamiltonianCycle18.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle18.findHamiltonianCycle(intArray51);
        int[] intArray55 = hamiltonianCycle15.findHamiltonianCycle(intArray51);
        int[] intArray56 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        java.lang.Class<?> wildcardClass57 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPathFound(0);
        boolean boolean88 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        java.lang.Class<?> wildcardClass47 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        boolean boolean47 = hamiltonianCycle35.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle35.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle85 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[] intArray91 = new int[] { (short) -1, (short) 0 };
        int[][] intArray92 = new int[][] { intArray88, intArray91 };
        int[] intArray93 = hamiltonianCycle85.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle64.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle63.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 1);
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 100);
        boolean boolean31 = hamiltonianCycle15.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean34 = hamiltonianCycle32.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray54 = new int[][] { intArray49, intArray53 };
        int[] intArray55 = hamiltonianCycle35.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle35.findHamiltonianCycle(intArray63);
        boolean boolean67 = hamiltonianCycle35.isPresent((int) ' ');
        boolean boolean69 = hamiltonianCycle35.isPresent((int) (short) 10);
        boolean boolean71 = hamiltonianCycle35.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent((int) (byte) 10);
        boolean boolean84 = hamiltonianCycle72.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle85 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[] intArray91 = new int[] { (short) -1, (short) 0 };
        int[][] intArray92 = new int[][] { intArray88, intArray91 };
        int[] intArray93 = hamiltonianCycle85.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle72.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle35.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle32.findHamiltonianCycle(intArray92);
        int[] intArray97 = hamiltonianCycle15.findHamiltonianCycle(intArray92);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean64 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle32.findHamiltonianCycle(intArray62);
        int[] intArray65 = hamiltonianCycle17.findHamiltonianCycle(intArray62);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray62);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean74 = hamiltonianCycle0.isPathFound(0);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        java.lang.Class<?> wildcardClass77 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        boolean boolean41 = hamiltonianCycle19.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle42.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        java.lang.Class<?> wildcardClass81 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        boolean boolean61 = hamiltonianCycle27.isPathFound(0);
        boolean boolean63 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle27.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass5 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean47 = hamiltonianCycle45.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray83 = hamiltonianCycle21.findHamiltonianCycle(intArray78);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) (short) 10);
        int[] intArray57 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray63 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray76 = new int[][] { intArray57, intArray63, intArray69, intArray75 };
        int[] intArray77 = hamiltonianCycle39.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        boolean boolean15 = hamiltonianCycle5.isPresent(0);
        boolean boolean17 = hamiltonianCycle5.isPresent((int) '4');
        boolean boolean19 = hamiltonianCycle5.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        boolean boolean32 = hamiltonianCycle20.isPathFound(0);
        boolean boolean34 = hamiltonianCycle20.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray54 = new int[][] { intArray49, intArray53 };
        int[] intArray55 = hamiltonianCycle35.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle35.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle20.findHamiltonianCycle(intArray63);
        int[] intArray67 = hamiltonianCycle5.findHamiltonianCycle(intArray63);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        java.lang.Class<?> wildcardClass69 = intArray68.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle23.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPathFound(1);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        java.lang.Class<?> wildcardClass59 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        boolean boolean61 = hamiltonianCycle27.isPathFound(0);
        boolean boolean63 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle27.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(0);
        boolean boolean44 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        java.lang.Class<?> wildcardClass59 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle23.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray56 = hamiltonianCycle0.findHamiltonianCycle(intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent((int) (byte) 10);
        boolean boolean57 = hamiltonianCycle45.isPresent((int) '4');
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (byte) 0);
        boolean boolean61 = hamiltonianCycle45.isPathFound(1);
        boolean boolean63 = hamiltonianCycle45.isPresent((int) '#');
        boolean boolean65 = hamiltonianCycle45.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean68 = hamiltonianCycle66.isPresent((int) (short) -1);
        boolean boolean70 = hamiltonianCycle66.isPresent((int) (short) 0);
        boolean boolean72 = hamiltonianCycle66.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent((int) (byte) 10);
        boolean boolean85 = hamiltonianCycle73.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle73.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle66.findHamiltonianCycle(intArray93);
        int[] intArray97 = hamiltonianCycle45.findHamiltonianCycle(intArray93);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle53.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean46 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent(10);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean46 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean29 = hamiltonianCycle27.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent((int) (short) 10);
        int[] intArray48 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray54 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray67 = new int[][] { intArray48, intArray54, intArray60, intArray66 };
        int[] intArray68 = hamiltonianCycle30.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle27.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle50.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) (short) 10);
        int[] intArray57 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray63 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray76 = new int[][] { intArray57, intArray63, intArray69, intArray75 };
        int[] intArray77 = hamiltonianCycle39.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        java.lang.Class<?> wildcardClass67 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        boolean boolean47 = hamiltonianCycle35.isPresent(100);
        boolean boolean49 = hamiltonianCycle35.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle35.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle40.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean39 = hamiltonianCycle37.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle40.findHamiltonianCycle(intArray70);
        int[] intArray73 = hamiltonianCycle37.findHamiltonianCycle(intArray70);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) 1);
        int[][] intArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = hamiltonianCycle0.findHamiltonianCycle(intArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        boolean boolean24 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) 1);
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        boolean boolean49 = hamiltonianCycle37.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle37.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle7 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray10 = new int[] { (short) -1, (short) 0 };
        int[] intArray13 = new int[] { (short) -1, (short) 0 };
        int[][] intArray14 = new int[][] { intArray10, intArray13 };
        int[] intArray15 = hamiltonianCycle7.findHamiltonianCycle(intArray14);
        boolean boolean17 = hamiltonianCycle7.isPresent((int) (byte) 10);
        boolean boolean19 = hamiltonianCycle7.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        int[] intArray29 = hamiltonianCycle7.findHamiltonianCycle(intArray27);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray27);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean84 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        boolean boolean39 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle53.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle40.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle27.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent((int) (short) 10);
        int[] intArray57 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray63 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray76 = new int[][] { intArray57, intArray63, intArray69, intArray75 };
        int[] intArray77 = hamiltonianCycle39.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        java.lang.Class<?> wildcardClass79 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        java.lang.Class<?> wildcardClass37 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray36);
        int[][] intArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = hamiltonianCycle0.findHamiltonianCycle(intArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        java.lang.Class<?> wildcardClass67 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean22 = hamiltonianCycle20.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray53 = new int[][] { intArray48, intArray52 };
        int[] intArray54 = hamiltonianCycle34.findHamiltonianCycle(intArray53);
        int[] intArray55 = hamiltonianCycle23.findHamiltonianCycle(intArray53);
        int[] intArray56 = hamiltonianCycle20.findHamiltonianCycle(intArray53);
        int[] intArray57 = hamiltonianCycle11.findHamiltonianCycle(intArray53);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean60 = hamiltonianCycle58.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle58.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle11.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        boolean boolean98 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle36.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle35.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass35 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle85 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[] intArray91 = new int[] { (short) -1, (short) 0 };
        int[][] intArray92 = new int[][] { intArray88, intArray91 };
        int[] intArray93 = hamiltonianCycle85.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle64.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle63.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean46 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean46 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass35 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle17.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean62 = hamiltonianCycle0.isPresent(10);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean62 = hamiltonianCycle0.isPresent(10);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        java.lang.Class<?> wildcardClass37 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean28 = hamiltonianCycle26.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle26.findHamiltonianCycle(intArray59);
        int[] intArray63 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent(0);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray84 = new int[][] { intArray79, intArray83 };
        int[] intArray85 = hamiltonianCycle65.findHamiltonianCycle(intArray84);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle65.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle64.findHamiltonianCycle(intArray93);
        int[] intArray97 = hamiltonianCycle15.findHamiltonianCycle(intArray93);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle19.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent(10);
        boolean boolean94 = hamiltonianCycle0.isPresent(1);
        boolean boolean96 = hamiltonianCycle0.isPresent(1);
        boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        int[][] intArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        boolean boolean71 = hamiltonianCycle59.isPresent((int) (short) 10);
        int[] intArray77 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray83 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray89 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray95 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray96 = new int[][] { intArray77, intArray83, intArray89, intArray95 };
        int[] intArray97 = hamiltonianCycle59.findHamiltonianCycle(intArray96);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray96);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean23 = hamiltonianCycle21.isPresent((int) (short) -1);
        boolean boolean25 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean27 = hamiltonianCycle21.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle28.findHamiltonianCycle(intArray48);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray48);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray48);
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 10);
        int[] intArray46 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray52 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray65 = new int[][] { intArray46, intArray52, intArray58, intArray64 };
        int[] intArray66 = hamiltonianCycle28.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle25.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean51 = hamiltonianCycle49.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle49.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean60 = hamiltonianCycle58.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle58.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle55.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent(100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle28.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle23.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray72);
        int[] intArray75 = hamiltonianCycle39.findHamiltonianCycle(intArray72);
        int[] intArray76 = hamiltonianCycle28.findHamiltonianCycle(intArray72);
        boolean boolean78 = hamiltonianCycle28.isPresent((int) (short) 10);
        boolean boolean80 = hamiltonianCycle28.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle28.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle15.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle39.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent((int) (byte) 10);
        boolean boolean85 = hamiltonianCycle73.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle73.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle35.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle35.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) '4');
        boolean boolean17 = hamiltonianCycle3.isPresent((int) (byte) 0);
        boolean boolean19 = hamiltonianCycle3.isPathFound(1);
        boolean boolean21 = hamiltonianCycle3.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle22.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        boolean boolean55 = hamiltonianCycle43.isPresent((int) '4');
        boolean boolean57 = hamiltonianCycle43.isPresent((int) (byte) 0);
        boolean boolean59 = hamiltonianCycle43.isPathFound(1);
        boolean boolean61 = hamiltonianCycle43.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle83 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[][] intArray90 = new int[][] { intArray86, intArray89 };
        int[] intArray91 = hamiltonianCycle83.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle62.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle43.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean51 = hamiltonianCycle49.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle49.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass91 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) (short) 100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        boolean boolean50 = hamiltonianCycle38.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent((int) (byte) 10);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle85 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[] intArray91 = new int[] { (short) -1, (short) 0 };
        int[][] intArray92 = new int[][] { intArray88, intArray91 };
        int[] intArray93 = hamiltonianCycle85.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle64.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle51.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle38.findHamiltonianCycle(intArray92);
        int[] intArray97 = hamiltonianCycle23.findHamiltonianCycle(intArray92);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent(100);
        boolean boolean53 = hamiltonianCycle39.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent(0);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray84 = new int[][] { intArray79, intArray83 };
        int[] intArray85 = hamiltonianCycle65.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle54.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle39.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        boolean boolean61 = hamiltonianCycle27.isPathFound(0);
        boolean boolean63 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle27.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle32.findHamiltonianCycle(intArray62);
        int[] intArray65 = hamiltonianCycle17.findHamiltonianCycle(intArray62);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray62);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean47 = hamiltonianCycle45.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray83 = hamiltonianCycle21.findHamiltonianCycle(intArray78);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent(1);
        boolean boolean66 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean80 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle7 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray10 = new int[] { (short) -1, (short) 0 };
        int[] intArray13 = new int[] { (short) -1, (short) 0 };
        int[][] intArray14 = new int[][] { intArray10, intArray13 };
        int[] intArray15 = hamiltonianCycle7.findHamiltonianCycle(intArray14);
        boolean boolean17 = hamiltonianCycle7.isPresent((int) (byte) 10);
        boolean boolean19 = hamiltonianCycle7.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        int[] intArray29 = hamiltonianCycle7.findHamiltonianCycle(intArray27);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray27);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray40 = new int[][] { intArray35, intArray39 };
        int[] intArray41 = hamiltonianCycle21.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle20.findHamiltonianCycle(intArray49);
        int[] intArray53 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean51 = hamiltonianCycle49.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle49.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        int[][] intArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"graph\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        boolean boolean57 = hamiltonianCycle45.isPresent(100);
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        boolean boolean72 = hamiltonianCycle60.isPresent(100);
        boolean boolean74 = hamiltonianCycle60.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle60.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle45.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        boolean boolean73 = hamiltonianCycle61.isPresent((int) '4');
        boolean boolean75 = hamiltonianCycle61.isPresent((int) (byte) 0);
        boolean boolean77 = hamiltonianCycle61.isPathFound(1);
        boolean boolean79 = hamiltonianCycle61.isPresent((int) '#');
        boolean boolean81 = hamiltonianCycle61.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean94 = hamiltonianCycle0.isPathFound(0);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((-1));
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        boolean boolean37 = hamiltonianCycle25.isPresent(100);
        boolean boolean39 = hamiltonianCycle25.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle40.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle25.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle53.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle17.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle17.isPresent((int) ' ');
        boolean boolean51 = hamiltonianCycle17.isPresent((int) (short) 10);
        boolean boolean53 = hamiltonianCycle17.isPathFound(0);
        boolean boolean55 = hamiltonianCycle17.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent((int) (short) 10);
        int[] intArray74 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray80 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray86 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray92 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray93 = new int[][] { intArray74, intArray80, intArray86, intArray92 };
        int[] intArray94 = hamiltonianCycle56.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        java.lang.Class<?> wildcardClass97 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        boolean boolean84 = hamiltonianCycle74.isPresent(0);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray93 = new int[][] { intArray88, intArray92 };
        int[] intArray94 = hamiltonianCycle74.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle63.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray53 = new int[][] { intArray48, intArray52 };
        int[] intArray54 = hamiltonianCycle34.findHamiltonianCycle(intArray53);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle34.findHamiltonianCycle(intArray62);
        int[] intArray65 = hamiltonianCycle21.findHamiltonianCycle(intArray62);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray62);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        int[][] intArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = hamiltonianCycle0.findHamiltonianCycle(intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle87 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray90 = new int[] { (short) -1, (short) 0 };
        int[] intArray93 = new int[] { (short) -1, (short) 0 };
        int[][] intArray94 = new int[][] { intArray90, intArray93 };
        int[] intArray95 = hamiltonianCycle87.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle66.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle53.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray36);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        boolean boolean61 = hamiltonianCycle49.isPresent((int) (short) 10);
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray85 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray86 = new int[][] { intArray67, intArray73, intArray79, intArray85 };
        int[] intArray87 = hamiltonianCycle49.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle37.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        boolean boolean73 = hamiltonianCycle61.isPresent((int) '4');
        boolean boolean75 = hamiltonianCycle61.isPresent((int) (byte) 0);
        boolean boolean77 = hamiltonianCycle61.isPathFound(1);
        boolean boolean79 = hamiltonianCycle61.isPresent((int) '#');
        boolean boolean81 = hamiltonianCycle61.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass93 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle26.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle25.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        int[][] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = hamiltonianCycle0.findHamiltonianCycle(intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent((int) (byte) 10);
        boolean boolean85 = hamiltonianCycle73.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle73.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean66 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        boolean boolean37 = hamiltonianCycle3.isPathFound(0);
        boolean boolean39 = hamiltonianCycle3.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle3.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass13 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent(100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent(100);
        boolean boolean42 = hamiltonianCycle28.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle28.findHamiltonianCycle(intArray62);
        int[] intArray65 = hamiltonianCycle13.findHamiltonianCycle(intArray62);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray62);
        java.lang.Class<?> wildcardClass67 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean30 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean48 = hamiltonianCycle46.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle46.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle37.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean25 = hamiltonianCycle23.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        boolean boolean38 = hamiltonianCycle26.isPresent((int) (short) 10);
        int[] intArray44 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray50 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray56 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray62 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray63 = new int[][] { intArray44, intArray50, intArray56, intArray62 };
        int[] intArray64 = hamiltonianCycle26.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle23.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        int[] intArray57 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray62 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray67 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[] intArray72 = new int[] { (byte) -1, (short) 0, (-1), (short) 10 };
        int[][] intArray73 = new int[][] { intArray57, intArray62, intArray67, intArray72 };
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass35 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle40.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent(100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle28.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass63 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }
}

